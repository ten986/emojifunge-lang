A: B+C をメモリに載せる -> いい感じの絵文字列だとか改行だとかを載せておきたい
B: A を出力する
C: A で載せたものを出力する

A の問題点: output-emoji と、改行用の output-ascii を用意する必要あり
例えば5列なら、5回 output-emoji、1回 output-ascii みたいな？
↑これが C の機能

C ↓
[] を改行として扱って、into-nested-stack -> length -> mailbox-in -> exit-nested-stack -> mailbox-out で判定
0 なら改行を出力、0以外ならoutput-emojiする

A は、B+Cを頑張ってメモリに載せれば良い（数値作ってスタック化して...の作業）-> この作業はBより機械化されている

B の中に、length取ってstackにしてstack modeにしてdupしてinto-nested-stackする
-> ここでempty stack になったら終了とか？ -> -1 がpopされる

[] を改行として扱って、into-nested-stack -> length で判定
0 なら「改行出力コード」を出力
🔟🔢
['55357', '56607'] ['55357', '56610']

これだるすぎるので、arrayからemoji出力できるやつ組んどきたいな...???

0 以外なら「emoji出力コードループ」へ
mailbox-in で length を退避する
reverseする
📥 () 📤 💌 🔣

B部分の作成中 emoji出力コードループ

👀🔟📬🙃0️⃣👎💞➡️💕🔟💞🈹💞🔟💞➗💕⤵️🔢🔟🔡🔢🔟🔡🔢🔟🔡🔢🔟🔡🔢🔟🔡🔢🔟🔡🔚
⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬆️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬅️

0を仕込む 55357, 0
ここからループ
mod 10 する 7, 55357, 0
仕込む 55357, 7, 0
div 10 する　5535, 7, 0
dup して > 0 なら下に行ってループ
= 0 なら
0 5 5 3 5 7 -1 次の数字 という状態になってるはず

👀🔟📬🙃0️⃣👎💞➡️💕🔟💞🈹💞🔟💞➗💕⤵️🚮➡️6️⃣8️⃣✖️➕🅰️💯🔟✖️✖️2️⃣Ⓜ️➗➕2️⃣🅰️➗🅰️🅰️2️⃣✖️✖️➖👍3️⃣💌🔣💕👍⤵️🔚
⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬆️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬅️⬜️⬆️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬅️

['48+n', '65039', '8419']

👀🔟📬🙃➡️0️⃣👎💞➡️💕🔟💞🈹💞🔟💞➗💕⤵️🚮⬇️
➡️⬜️⬜️⬜️⬆️⬜️⬜️⬜️⬆️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬅️⬜️⬜️
⬜️⬇️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬅️
⬜️➡️0️⃣4️⃣➕🔟✖️8️⃣➕0️⃣6️⃣➕🔟✖️5️⃣➕🔟✖️0️⃣➕🔟✖️3️⃣➕🔟✖️9️⃣➕0️⃣8️⃣➕🔟✖️4️⃣➕🔟✖️1️⃣➕🔟✖️9️⃣➕3️⃣💌🔣⬇️
⬜️⬇️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬅️
⬜️➡️6️⃣8️⃣✖️➕🅰️💯🔟✖️✖️2️⃣Ⓜ️➗➕2️⃣🅰️➗🅰️🅰️2️⃣✖️✖️➖👍3️⃣💌🔣0️⃣1️⃣➕🔟✖️0️⃣➕🔟✖️1️⃣➕🔟✖️3️⃣➕🔟✖️3️⃣➕1️⃣💌🔣💕👍⤵️⬇️
⬜️⬜️⬇️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬅️⬜️
⬜️⬜️➡️0️⃣5️⃣➕🔟✖️5️⃣➕🔟✖️3️⃣➕🔟✖️5️⃣➕🔟✖️7️⃣➕0️⃣5️⃣➕🔟✖️6️⃣➕🔟✖️6️⃣➕🔟✖️0️⃣➕🔟✖️7️⃣➕2️⃣💌🔣⬇️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️
⬜️⬜️⬇️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬅️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️
⬜️⬜️➡️0️⃣1️⃣➕🔟✖️0️⃣➕🔟✖️0️⃣➕🔟✖️0️⃣➕🔟✖️6️⃣➕0️⃣6️⃣➕🔟✖️5️⃣➕🔟✖️0️⃣➕🔟✖️3️⃣➕🔟✖️9️⃣➕2️⃣💌🔣⬇️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️
⬜️⬆️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬅️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️
⬜️⬇️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬅️
⬜️➡️🚮💕👍⤵️🔚
⬆️⬜️⬜️⬜️⬜️⬅️

↑emoji（[55555,44444]を受け取ってそれの出力コードを書く部分）
👀🔟
📧

👀🔟👀0️⃣📧👀🙃⬇️
⬇️⬜️⬜️⬜️⬜️⬜️⬜️⬅️
➡️📐⤵️🔚
⬜️⬜️➡️📬🙃📐⤵️0️⃣5️⃣➕🔟✖️5️⃣➕🔟✖️3️⃣➕🔟✖️5️⃣➕🔟✖️7️⃣➕0️⃣5️⃣➕🔟✖️6️⃣➕🔟✖️6️⃣➕🔟✖️0️⃣➕🔟✖️7️⃣➕2️⃣💌🔣0️⃣5️⃣➕🔟✖️5️⃣➕🔟✖️3️⃣➕🔟✖️5️⃣➕🔟✖️7️⃣➕0️⃣5️⃣➕🔟✖️6️⃣➕🔟✖️6️⃣➕🔟✖️0️⃣➕🔟✖️9️⃣➕2️⃣💌🔣📫🚮⬇️
⬆️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬅️
⬜️⬜️⬜️⬜️⬜️⬜️➡️📐📥➡️0️⃣👎💞➡️💕🔟💞🈹💞🔟💞➗💕⤵️🚮⬇️
⬜️➡️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬆️⬜️⬜️⬜️⬆️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬅️⬜️⬜️
⬜️⬜️⬇️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬅️
⬜️⬜️➡️0️⃣4️⃣➕🔟✖️8️⃣➕0️⃣6️⃣➕🔟✖️5️⃣➕🔟✖️0️⃣➕🔟✖️3️⃣➕🔟✖️9️⃣➕0️⃣8️⃣➕🔟✖️4️⃣➕🔟✖️1️⃣➕🔟✖️9️⃣➕3️⃣💌🔣⬇️
⬜️⬜️⬇️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬅️
⬜️⬜️➡️6️⃣8️⃣✖️➕🅰️💯🔟✖️✖️2️⃣Ⓜ️➗➕2️⃣🅰️➗🅰️🅰️2️⃣✖️✖️➖👍3️⃣💌🔣0️⃣1️⃣➕🔟✖️0️⃣➕🔟✖️1️⃣➕🔟✖️3️⃣➕🔟✖️3️⃣➕1️⃣💌🔣💕👍⤵️⬇️
⬜️⬜️⬜️⬇️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬅️⬜️
⬜️⬜️⬜️➡️0️⃣5️⃣➕🔟✖️5️⃣➕🔟✖️3️⃣➕🔟✖️5️⃣➕🔟✖️7️⃣➕0️⃣5️⃣➕🔟✖️6️⃣➕🔟✖️6️⃣➕🔟✖️0️⃣➕🔟✖️7️⃣➕2️⃣💌🔣⬇️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️
⬜️⬜️⬜️⬇️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬅️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️
⬜️⬜️⬜️➡️0️⃣1️⃣➕🔟✖️0️⃣➕🔟✖️0️⃣➕🔟✖️0️⃣➕🔟✖️6️⃣➕0️⃣6️⃣➕🔟✖️5️⃣➕🔟✖️0️⃣➕🔟✖️3️⃣➕🔟✖️9️⃣➕2️⃣💌🔣⬇️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️
⬜️⬜️⬆️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬅️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️
⬜️⬜️⬇️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬅️
⬜️⬜️➡️🚮💕👍⤵️📫🚮📤6️⃣8️⃣✖️➕🅰️💯🔟✖️✖️2️⃣Ⓜ️➗➕2️⃣🅰️➗🅰️🅰️2️⃣✖️✖️➖👍3️⃣💌🔣⬇️
⬜️⬆️⬜️⬜️⬜️⬜️⬅️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️
⬜️⬇️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬅️
⬜️➡️0️⃣5️⃣➕🔟✖️5️⃣➕🔟✖️3️⃣➕🔟✖️5️⃣➕🔟✖️7️⃣➕0️⃣5️⃣➕🔟✖️6️⃣➕🔟✖️4️⃣➕🔟✖️6️⃣➕🔟✖️0️⃣➕2️⃣💌🔣⬇️
⬜️⬇️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬅️
⬜️➡️0️⃣5️⃣➕🔟✖️5️⃣➕🔟✖️3️⃣➕🔟✖️5️⃣➕🔟✖️7️⃣➕0️⃣5️⃣➕🔟✖️6️⃣➕🔟✖️6️⃣➕🔟✖️1️⃣➕🔟✖️1️⃣➕2️⃣💌🔣⬇️
⬆️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬜️⬅️

Bは、A（というかメモリ）を順に見て、80000だったら8*100*100を出す、みたいなのをやればいいんだな
[9999,444,3333],[],[66666,53252,64,6463],... みたいなのから、コードを出力する感じのやつを書く
Aは、これをもとに書く
これemoji出力していかないといけないのやばいなw

組む順番としては、C->B->Aとなる
; Bは・・・？？？
; Bも、output-emoji と、改行用の output-ascii なんだけど、循環参照感ある
; ここをなんとかしてるんだろうな（？）

<https://qiita.com/angel_p_57/items/f954d30a637566b74a6d>

function convertCodeUnits(str) {
    const codeUnits = [];
    for (let i = 0; i < str.length; i++) {
        codeUnits.push(str.charCodeAt(i).toString());
    }
    return codeUnits;
}

0️⃣5️⃣➕🔟✖️6️⃣➕🔟✖️6️⃣➕🔟✖️1️⃣➕🔟✖️1️⃣➕ (56611)

0️⃣➕5️⃣🔟✖️5️⃣➕🔟✖️3️⃣➕🔟✖️5️⃣➕🔟✖️7️⃣➕

🔢🔚

5️⃣🔟✖️5️⃣➕🔟✖️3️⃣➕🔟✖️5️⃣➕🔟✖️7️⃣➕5️⃣🔟✖️6️⃣➕🔟✖️6️⃣➕🔟✖️1️⃣➕🔟✖️1️⃣➕2️⃣💌🔣🔚
-> 🔣

55357, 56611 (CodeUnitの順番に入れてけばいいっぽい)

0️⃣1️⃣2️⃣3️⃣4️⃣5️⃣6️⃣7️⃣8️⃣9️⃣🔟

0️⃣ : ['48', '65039', '8419']
9️⃣ : ['57', '65039', '8419']
🔟 : ['55357', '56607']
➕ : ['10133']
✖️ : ['10006', '65039']
💌 : ['55357', '56460']
🔣 (output-emoji): ['55357', '56611']
🔚 : ['55357', '56602']
🙃 :

機械的に作られたAの部分がざーってある
BでAの部分を出力する
CでB+Cを出力する

一行にする or comment で頑張る
移動処理がかなり貧弱（skipくらいくれ）

一行で書いたら、改行いらない説ある

B,C については複数行になるよな〜〜

notの説明が嘘

% echo 0️⃣ | ./node_modules/.bin/ts-node -r tsconfig-paths/register emoji.ts

empty stack で 📫 するとバグる
